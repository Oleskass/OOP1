package Ex002Phonebook;

// 1 У нас есть некоторое статическое поле, сохраняющее в себе инф-цию о нашей базе данных
// 2 Папка Core: Есть инфраструктурный модуль Core,
// в нём класс Phonebook (детали реализации пока неважны) в записной книжке есть механика: конструктор ((инициализация (создать тел.книгу)), метод add (добавление контакта, создание записи), получить контакт (получение записи), метод обновления (реализовать по аналогии), метод удаления
// 3 Модель, в ней есть класс Contact (здесь в контексте модели данных, а не модели mvp). Наша модель - Contact. Там же указываются поля для контакта (date, firstName, lastName, company, phone (email), description) - здесь пока всё сделаем на String, чтобы не грузить и было понятнее всё пока
// *Подумать про создание email как некой сущности
// В Contact есть конструктор пока что с 3 аргументами
// *Подумать как описать красивое создание сильно большой тел.книги
// В Contact переопределяем equals
// 4 Папка MVP: Model, Presenter, View
// 1)Model (Модель работы с данными) работает с записной книжкой. Там есть какая-то логика. В кач-ве аргумента передаётся путь к файлу с базой данных
// Возможность получения текущего контакта currentContact, на который сомтрит индекс.
// Есть логика загрузки и сохранения данных (load и save), получение текущей записной книжки (currentBook), получение текущего индекса (getCurrentIndex), запись текущего индекса (если потребуется изменения)(setCurrentIndex)
// 2)View - интерфейс. String getFirstName, void setFirstName(String value). Там ещё может понадобиться механизм получения и указания фамилии (getLastName, setLastName) и описания (getDescription, setDescription)
// *Технически мы можем создать NewView и в этот интерфейс прописать остальные поля (щас 3, надо 8 по условиям задачи)
// 3)Presenter знает о существовании модели и вью (private Model model и private View view), в конструкторе в кач-ве аргумента мы принимаем конкретный вью и путь к нашей базе данных, которая дальше будет просто пробрасываться в нашу модель
// LoadFromFile - логика загрузки данных (презентер связывает модель с конкретным представлением) 
// метод добавления, метод удаления, сохранения, методы переключения к след. и пред. записи. Презентер - это основной "костяк".
// 5 Папка UI: взаимодействие с терминалом здесь.
// App - там создание конкретного View, затем Presenter принимает в себя view конкретное и путь к файлу, Presenter отвечачает за загрузку данных, на кнопку 1 след.запись, на кнопку 2 пред.запись
// 6 Папка Client: там наш Program, в нём просто нажимаем кнопочку для запуска приложения (через App в папке UI)
public class Config {
    public static String pathDb = "data.db";
}
